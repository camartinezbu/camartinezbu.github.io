<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Concepto on Camilo Martínez Burgos</title><link>https://www.camartinezbu.com/tags/concepto/</link><description>Recent content in Concepto on Camilo Martínez Burgos</description><generator>Hugo -- gohugo.io</generator><language>es</language><copyright>© 2025 Camilo Martínez Burgos</copyright><lastBuildDate>Fri, 07 Apr 2023 13:19:00 -0500</lastBuildDate><atom:link href="https://www.camartinezbu.com/tags/concepto/index.xml" rel="self" type="application/rss+xml"/><item><title>¿Cómo funcionan los decoradores en Python?</title><link>https://www.camartinezbu.com/posts/como-funcionan-los-decoradores-en-python/</link><pubDate>Fri, 07 Apr 2023 13:19:00 -0500</pubDate><guid>https://www.camartinezbu.com/posts/como-funcionan-los-decoradores-en-python/</guid><description>&lt;p>Los decoradores en Python son una característica poderosa y útil que te permiten modificar o envolver el comportamiento de una función sin modificar su código original. Sin embargo, si vienes de otros lenguajes o eres principiante en programación, puede que su funcionamiento sea un poco enredado.&lt;/p>
&lt;p>En este artículo quiero explicarte cómo funcionan y darte algunos ejemplos básicos para que puedas involucrarlos en tu flujo de trabajo ordinario en Python.&lt;/p></description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://www.camartinezbu.com/posts/como-funcionan-los-decoradores-en-python/featured.jpg"/></item><item><title>Args y Kwargs en Python</title><link>https://www.camartinezbu.com/posts/args-y-kwargs-en-python/</link><pubDate>Tue, 20 Sep 2022 10:15:00 -0500</pubDate><guid>https://www.camartinezbu.com/posts/args-y-kwargs-en-python/</guid><description>&lt;p>Uno de los primeros temas que probablemente abordaste al aprender a programar fue la creación de tus propias funciones. Estas ayudan a ordenar las instrucciones que plasmas en el código, a ahorrar espacio al no tener que repetir los mismos comandos varias veces, a disminuir la probabilidad de errores de tipeo porque sólo tienes que hacer la corrección en un lugar, etc. Sin embargo, puede que no hayas trabajado con los argumentos &lt;code>*args&lt;/code> y &lt;code>**kwargs&lt;/code>, que te van a ayudar cuando no sabes a ciencia cierta cuál será el número de argumentos de tu función.&lt;/p></description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://www.camartinezbu.com/posts/args-y-kwargs-en-python/featured.jpg"/></item><item><title>La anatomía de un gráfico</title><link>https://www.camartinezbu.com/posts/la-anatomia-de-un-grafico/</link><pubDate>Sat, 03 Sep 2022 15:35:00 -0500</pubDate><guid>https://www.camartinezbu.com/posts/la-anatomia-de-un-grafico/</guid><description>&lt;p>En diversas aplicaciones de visualización de datos, la creación de un gráfico se limita a dar clic a un botón que te muestra directamente el resultado final. Si bien esto es muy conveniente desde el punto de vista de un usuario ocasional, también te puede quitar la posibilidad de entender con más detalle los elementos que hacen que un gráfico funcione. Por esta razón, hoy quiero hablarte de la Gramática de los Gráficos.&lt;/p></description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://www.camartinezbu.com/posts/la-anatomia-de-un-grafico/featured.png"/></item></channel></rss>